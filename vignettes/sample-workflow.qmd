---
title: "Sample Workflow in `evoland-plus`"
vignette: >
  %\VignetteIndexEntry{evoland-plus-sample-workflow}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

This vignette shows the workflow for how to make use of the `evoland-plus` package. 
First, we make sure it is installed or loaded:

```{r}
# remotes::install_github("ethzplus/evoland-plus")
library("evoland") # or devtools::load_all()
```

Then, the real fun starts: we instantiate a new in-memory database and ingest the default configuration.

```{r}
db <- evoland_db$new(":memory:")
config_path <- system.file("config.json", package = "evoland")
ingest_evoland_config(db, config_path)
```

The configuration contains the definition of the base grid we'll be working on, also known as the coordinates table.
The advantage of specifying a set of coordinates as a table becomes clear further down the line, where sparse spatial domains will make the tabular representation more efficient than dense rasters.
The relational database model ensures that we have a clear identity of each geographic point, and potentially allows us to tesselate our study domain using quite different polygons from a boring old square grid!
But for now, let's stick to the square grid.
We can populate the `coords_t` table with such a set of coordinates in the database using the following command:

```{r}
populate_coords_t(db)
```

