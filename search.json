[{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ethzplus.github.io/evoland-plus/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://ethzplus.github.io/evoland-plus/articles/ingest-arealstatistik.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Ingest Swiss Arealstatistik LULC Data","text":"retrieve path evoland default configuration; work, likely copy working directory adapt . database connection closed db object removed workspace garbage collected (.e. rm(db); gc()); means lock database, even reading! Also, let’s make sure provider Arealstatistik. EPSG:2056 sampling relies raw coordinate matrix without CRS info, let’s make sure ’re working CRS.","code":"library(evoland)  # new database file. schema gets auto-applied. db <- evoland_db$new(path = \"arealstatistik-model.duckdb\")"},{"path":"https://ethzplus.github.io/evoland-plus/articles/ingest-arealstatistik.html","id":"construct-coordinate-set","dir":"Articles","previous_headings":"","what":"Construct Coordinate Set","title":"Ingest Swiss Arealstatistik LULC Data","text":"Now ’ve read configuration database, ’s time construct set coordinate points. essential part table ’ll use later build correct sample land use classes corresponding coordinate point IDs also built.","code":"db$set_coords(   type = \"square\",   epsg = 2056,   extent = terra::ext(c(     xmin = 2697000,     xmax = 2698000,     ymin = 1252000,     ymax = 1253000   )),   resolution = 100 ) minimal_coords_t <- db$coords_t[, .(id_coord, lon, lat)]"},{"path":"https://ethzplus.github.io/evoland-plus/articles/ingest-arealstatistik.html","id":"retrieve-data","dir":"Articles","previous_headings":"","what":"Retrieve Data","title":"Ingest Swiss Arealstatistik LULC Data","text":"Let’s read data sources referenced configuration download directory getOption(\"evoland.cachedir\"). read package load EVOLAND_CACHEDIR environment variable, defaulting ~/evoland-cache.","code":"lulc_files <-   data.frame(     url = \"https://dam-api.bfs.admin.ch/hub/api/dam/assets/32376216/appendix\",     md5sum = \"c32937eb4a11fc9c5c58c66e9830360a\"   ) |>   download_and_verify()  db$commit(   data.frame(     key = c(\"lulc_data_url\", \"lulc_data_md5sum\", \"lulc_data_provider\"),     value = c(lulc_files$url, lulc_files$md5sum, \"BFS Arealstatistik\")   ),   table_name = \"reporting_t\",   mode = \"append\" )  zippath <- file.path(   getOption(\"evoland.cachedir\"),   lulc_files$md5sum,   lulc_files$local_filename )  # find singular csv csv_file <-   unzip(zippath, list = TRUE) |>   purrr::pluck(\"Name\") |>   stringi::stri_subset_fixed(\".csv\") stopifnot(length(csv_file) == 1L)"},{"path":"https://ethzplus.github.io/evoland-plus/articles/ingest-arealstatistik.html","id":"read-data","dir":"Articles","previous_headings":"","what":"Read Data","title":"Ingest Swiss Arealstatistik LULC Data","text":"Now file know name contained CSV file, let’s read data.table. columns matching [0-9]{2}_72 indicate land use / land cover one 72 classes columns starting FJ indicate flight year respective period.","code":"csv_con <- unz(zippath, csv_file, open = \"r\") arealstat_dt <-   readLines(csv_con) |>   data.table::fread(     text = _,     # selecting only years 1985-2018 for now; Arealstatistik 2025 is not yet finished     select = c(       \"E_COORD\",       \"N_COORD\",       \"FJ85\",       \"FJ97\",       \"FJ09\",       \"FJ18\",       # \"FJ25\",       \"AS85_72\",       \"AS97_72\",       \"AS09_72\",       \"AS18_72\"       # \"AS25_72\"     )   ) close(csv_con)"},{"path":"https://ethzplus.github.io/evoland-plus/articles/ingest-arealstatistik.html","id":"recode-lulc-classes","dir":"Articles","previous_headings":"","what":"Recode LULC Classes","title":"Ingest Swiss Arealstatistik LULC Data","text":"configuration file contains section declaring land use classes used simulation. class contains src_classes field, ’ll now make use recode source material internal classification system.","code":"# create lookup table to aggregate arealstatistik (AS) ids to id_lulc db$lulc_meta_t <- create_lulc_meta_t(   list(     closed_forest = list(       pretty_name = \"Dense Forest\",       description = \"Normal forest; Forest strips; Afforestations; Felling areas; Brush forest\",       src_classes = c(50:53, 57L)     ),     arable = list(pretty_name = \"Arable Land\", src_classes = 41L),     urban = list(       pretty_name = \"Urban areas\",       description = \"Industrial and commercial buildings; Surroundings of industrial and commercial buildings; One- and two-family houses; Surroundings of one- and two-family houses; Terraced houses; Surroundings of terraced houses; Blocks of flats; Surroundings of blocks of flats; Public buildings; Surroundings of public buildings; Agricultural buildings; Surroundings of agricultural buildings; Unspecified buildings; Surroundings of unspecified buildings; Parking areas; Construction sites; Unexploited urban areas; Public parks; Sports facilities; Golf courses; Camping areas; Garden allotments; Cemeteries\",       src_classes = c(1:14, 19L, 29:36)     ),     static = list(       pretty_name = \"Static / immutable classes\",       description = \"Motorways; Green motorway environs; Roads and paths; Green road environs;  Sealed railway areas; Green railway environs;  Airports; Airfields, green airport environs;  Energy supply plants; Waste water treatment plants; Other supply or waste treatment plants; Dumps; Quarries, mines;  Lakes; Rivers; Flood protection structures; Avalanche and rockfall barriers;  Wetlands; Alpine sports facilities; Rocks; Screes, sand; Landscape interventions\",       src_classes = c(15:18, 20:28, 61:63, 66:71)     )   ) )  lulc_meta_t <- db$lulc_meta_long_v[, .(id_lulc, AS = src_class)]  # longer form: arealstatistik replaced by id_lulc, flightyear lulc_fy_dt <-   data.table::melt(     # pivot longer with year from regex and coords as ID columns     arealstat_dt,     id.vars = c(\"E_COORD\", \"N_COORD\"),     measure.vars = data.table::measure(       value.name, # first match group to columns       year = as.integer, # second match group to single column       pattern = \"(^FJ|AS)([0-9]{2})\"     )   )[     ,     year := ifelse(year > 84L, year + 1900L, year + 2000L)   ][     lulc_meta_t,     .(       x = E_COORD,       y = N_COORD,       year,       flightyear = FJ,       id_lulc     ),     on = \"AS\",     nomatch = NULL   ]"},{"path":"https://ethzplus.github.io/evoland-plus/articles/ingest-arealstatistik.html","id":"rasterize-and-sample","dir":"Articles","previous_headings":"","what":"Rasterize and Sample","title":"Ingest Swiss Arealstatistik LULC Data","text":"want take advantage spatial structure data extract coordinate values Arealstatistik points coordinates declared. Hence, rasterize tabular data multilayer terra::rast object. Now ndarray spatial properties, let’s use extract pivoting magic coerce data table id_coord, id_lulc, date tuple.","code":"# data.table that can be coerced to multilayer terra::rast using type = \"xylz\" layerized_dt <-   data.table::melt(     lulc_fy_dt,     id.vars = c(\"x\", \"y\", \"year\")   )[     ,     layer := paste(year, variable, sep = \"_\")   ] data.table::setkey(layerized_dt, layer, x, y)  r <-   terra::rast(     layerized_dt[, .(x, y, layer, value)],     type = \"xylz\",     crs = \"EPSG:2056\"   ) |>   terra::as.int() # necessary because terra::rast casts to numeric? id_coord_var_dt <-   terra::extract(     x = r,     y = as.matrix(minimal_coords_t[, .(lon, lat)]),     method = \"simple\"   ) |>   data.table::as.data.table() |>   cbind(id_coord = minimal_coords_t[[\"id_coord\"]]) |>   data.table::melt(     id.vars = \"id_coord\",     measure.vars = data.table::measure(       year = as.integer,       value.name,       pattern = \"([0-9]{4})_(.*)\"     )   ) |>   na.omit(cols = c(\"id_lulc\", \"flightyear\")) |>   data.table::setnames(     old = c(\"year\", \"flightyear\"),     new = c(\"period_date\", \"date\")   )"},{"path":"https://ethzplus.github.io/evoland-plus/articles/ingest-arealstatistik.html","id":"associate-with-regular-periods","dir":"Articles","previous_headings":"","what":"Associate with Regular Periods","title":"Ingest Swiss Arealstatistik LULC Data","text":"Since land use change model runs discrete time original land use data may regular time series, associate id_coord, id_lulc tuple regular discrete id_period, built periods section settings. now, join condition (left closed) codified wiki. Making canonical save future modellers headaches.","code":"# setup transition periods db$periods_t <- periods_t <- create_periods_t(   period_length_str = \"P10Y\",   start_observed = \"1985-01-01\",   end_observed = \"2020-01-01\",   end_extrapolated = \"2060-01-01\" )  # build date objects from years. use 1st of january id_coord_var_dt[   ,   `:=`(     period_date = data.table::as.IDate(paste0(period_date, \"-01-01\")),     date = data.table::as.IDate(paste0(date, \"-01-01\"))   ) ]  lulc_data_t <-   as_lulc_data_t(     id_coord_var_dt[       periods_t,       .(         id_coord,         id_lulc,         id_period,         date       ),       on = .(         # left closed interval         period_date >= start_date,         period_date < end_date       ),       nomatch = NULL     ]   )"},{"path":"https://ethzplus.github.io/evoland-plus/articles/ingest-arealstatistik.html","id":"finalize-ingest","dir":"Articles","previous_headings":"","what":"Finalize: Ingest","title":"Ingest Swiss Arealstatistik LULC Data","text":"Now data prepared validated correct format, upsert database:","code":"db$lulc_data_t <- lulc_data_t rm(db) gc() # close out the database connection / file lock"},{"path":"https://ethzplus.github.io/evoland-plus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jan Hartman. Author, maintainer.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hartman J (2025). evoland: evoland-plus - evoland short - analyses land use evolution. R package version 0.0.0.9000, https://ethzplus.github.io/evoland-plus.","code":"@Manual{,   title = {evoland: evoland-plus - or evoland for short - analyses land use evolution},   author = {Jan Hartman},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://ethzplus.github.io/evoland-plus}, }"},{"path":"https://ethzplus.github.io/evoland-plus/index.html","id":"evoland-plus","dir":"","previous_headings":"","what":"evoland-plus - or evoland for short - analyses land use evolution","title":"evoland-plus - or evoland for short - analyses land use evolution","text":"evoland visualizes, optimizes, localizes determines predictable land use shifts","code":""},{"path":"https://ethzplus.github.io/evoland-plus/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"evoland-plus - or evoland for short - analyses land use evolution","text":"evoland-plus R package (evoland short) provides tools analyzing projecting land use evolution. package implements statistically calibrated, constrained model predicting locations future land use / land cover change (LULCC).","code":""},{"path":"https://ethzplus.github.io/evoland-plus/index.html","id":"analytic-aim","dir":"","previous_headings":"Overview","what":"Analytic Aim","title":"evoland-plus - or evoland for short - analyses land use evolution","text":"fundamental purpose evoland-plus : Gather process land use/land cover data multiple sources Calibrate statistical models understand historical land use transitions Project future land use patterns using predictive models allocation algorithms Support scenario analysis interventions parameter modifications package follows three-phase workflow: Data Preparation: Marshalling heterogeneous data sources unified database structure Calibration: Feature selection, training Markovian transition models, parameterizing allocation strategies Prediction + Allocation: Recursive model evaluation generate future land use projections represents re-implementation enhancement land use model originally published https://github.com/blenback/LULCC-CH, building substantial prior experience modernizing technical implementation.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/index.html","id":"development-environment-setup","dir":"","previous_headings":"","what":"Development Environment Setup","title":"evoland-plus - or evoland for short - analyses land use evolution","text":"can use renv set development environment dependencies. run renv::init() inside project directory, ’ll asked either install dependencies DESCRIPTION file, discover project files. former faster sufficient, given dependencies always declared DESCRIPTION. development, devtools::load_all() acts though calling library(evoland) installed package. makes easy rapidly reload code ’ve changed something.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"evoland-plus - or evoland for short - analyses land use evolution","text":"package follows Diátaxis documentation framework: Tutorials & -Guides: Available package vignettes (coming soon) Reference Documentation: Function-level documentation via ?function_name Explanation & Design Rationale: See project wiki comprehensive information package design implementation rationale, please refer GitHub Wiki, contains: Detailed explanation modeling approach Database schema architecture decisions Development guidelines coding standards Background land use change modeling theory","code":""},{"path":"https://ethzplus.github.io/evoland-plus/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"evoland-plus - or evoland for short - analyses land use evolution","text":"project licensed AGPL-3 License - see LICENSE.md file details.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"evoland-plus - or evoland for short - analyses land use evolution","text":"Don’t hesitate get contact @mmyrte /@blenback ’d like contribute!","code":""},{"path":"https://ethzplus.github.io/evoland-plus/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"evoland-plus - or evoland for short - analyses land use evolution","text":"work builds upon foundational research implementation available https://github.com/blenback/LULCC-CH.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/alloc_params_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Allocation Parameters Table — alloc_params_t","title":"Create Allocation Parameters Table — alloc_params_t","text":"Creates alloc_params_t table storing transition model metadata serialized model objects. function creates empty table proper structure storing fitted models.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/alloc_params_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Allocation Parameters Table — alloc_params_t","text":"","code":"as_alloc_params_t(x)  # S3 method for class 'alloc_params_t' print(x, nrow = 10, ...)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/alloc_params_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Allocation Parameters Table — alloc_params_t","text":"x list data.frame coercible data.table nrow see data.table::print.data.table ... passed data.table::print.data.table","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/alloc_params_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Allocation Parameters Table — alloc_params_t","text":"data.table class \"alloc_params_t\" columns: id_trans: Foreign key trans_meta_t id_period: Foreign key periods_t alloc_params: Map model (hyper) parameters goodness_of_fit: Map various measures fit (e.g., ROC AUC)","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/alloc_params_t.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Create Allocation Parameters Table — alloc_params_t","text":"print(alloc_params_t): Print alloc_params_t object, passing params data.table print","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/coords_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Coordinate Tables — coords_t","title":"Coordinate Tables — coords_t","text":"Create validate coords_t objects, describing base set coordinate points upon land use model intended run. coordinates declared points, can describe sparse domains (e.g. following polity boundaries) arbitrary distribution (e.g. square, hexagonal, voronoi, polygon tesselations).","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/coords_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coordinate Tables — coords_t","text":"","code":"as_coords_t(x)  # S3 method for class 'coords_t' print(x, nrow = 10, ...)  create_coords_t_square(epsg, extent, resolution, ...)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/coords_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coordinate Tables — coords_t","text":"nrow see data.table::print.data.table ... passed data.table::print.data.table epsg integerish scalar representing EPSG CRS code extent terra::SpatExtent object describing extent desired corods_t resolution numeric scalar, describing required resolution coords_t object. unit epsg.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/coords_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coordinate Tables — coords_t","text":"data.table class \"coords_t\" columns: id_coord: Unique ID coordinate pair lon: Longitude/x coordinate lat: Latitude/y coordinate elevation: Elevation (initially NULL) geom_polygon: Geometry polygon object (grid cells)","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/coords_t.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Coordinate Tables — coords_t","text":"print(coords_t): Print coords_t object, passing params data.table print","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/coords_t.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Coordinate Tables — coords_t","text":"as_coords_t(): Cast validate coords_t create_coords_t_square(): Create set square coordinates","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for DuckDB Database Interface — evoland_db","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"R6 class provides interface DuckDB database evoland package. class handles database initialization, data commits, data fetching operations.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"connection DBI connection object DuckDB database path Character string path database file write_mode Logical indicating database opened write mode","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"coords_t coords_t instance; see create_coords_t() type object assign. Assigning upsert operation. periods_t periods_t instance; see create_periods_t() type object assign. Assigning upsert operation. lulc_meta_t lulc_meta_t instance; see create_lulc_meta_t() type object assign. Assigning upsert operation. lulc_meta_long_v Return lulc_meta_long_v instance, .e. unrolled lulc_meta_t. lulc_data_t lulc_data_t instance; see as_lulc_data_t() type object assign. Assigning upsert operation. pred_meta_t pred_meta_t instance; see create_pred_meta_t() type object assign. Assigning upsert operation. pred_sources_v Retrieve table distinct predictor urls md5sum pred_data_t_float pred_data_t_float instance; see create_pred_data_t() type object assign. Assigning upsert operation. pred_data_t_int pred_data_t_int instance; see create_pred_data_t() type object assign. Assigning upsert operation. pred_data_t_bool pred_data_t_bool instance; see create_pred_data_t() type object assign. Assigning upsert operation. trans_meta_t trans_meta_t instance; see create_trans_meta_t() type object assign. Assigning upsert operation. trans_preds_t trans_preds_t instance; see create_trans_preds_t() type object assign. Assigning upsert operation. intrv_meta_t intrv_meta_t instance; see create_intrv_meta_t() type object assign. Assigning upsert operation. intrv_masks_t intrv_masks_t instance; see as_intrv_masks_t() type object assign. Assigning upsert operation. trans_models_t trans_models_t instance; see create_trans_models_t() type object assign. Assigning upsert operation. alloc_params_t alloc_params_t instance; see as_alloc_params_t() type object assign. Assigning upsert operation.","code":""},{"path":[]},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"evoland_db$new() evoland_db$commit() evoland_db$fetch() evoland_db$list_tables() evoland_db$execute() evoland_db$row_count() evoland_db$delete_from() evoland_db$copy_db() evoland_db$set_coords() evoland_db$clone()","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"Initialize new evoland_db object","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"","code":"evoland_db$new(   path,   write = TRUE,   report_name = \"evoland_scenario\",   report_name_pretty = \"Default Evoland Scenario\",   report_include_date = FALSE,   report_username = Sys.getenv(\"USER\", unset = \"unknown\") )"},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"path Character string. Path DuckDB database file. May also \":memory:\". write Logical. Whether open database write mode. Default TRUE. FALSE, database file must already exist. report_name Character string. Name report scenario. report_name_pretty Character string. Pretty name report scenario. report_include_date Logical. Whether include date report scenario. report_username Character string. Username report scenario, defaults $USER env var","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"new evoland_db object","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"method-commit-","dir":"Reference","previous_headings":"","what":"Method commit()","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"Commit data database","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"","code":"evoland_db$commit(x, table_name, mode = \"upsert\")"},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"x Data object commit. table_name Table target mode Character string. One \"upsert\" (default), \"append\", \"overwrite\".","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"NULL (called side effects)","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"method-fetch-","dir":"Reference","previous_headings":"","what":"Method fetch()","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"Fetch data database","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"","code":"evoland_db$fetch(table_name, where = NULL, limit = NULL)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"table_name Character string. Name database table view query. Character string. Optional clause SQL query. limit integerish, limit amount rows return","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"table original class","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"method-list-tables-","dir":"Reference","previous_headings":"","what":"Method list_tables()","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"List tables database","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"","code":"evoland_db$list_tables()"},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"Character vector table names","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"method-execute-","dir":"Reference","previous_headings":"","what":"Method execute()","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"Execute statement","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"","code":"evoland_db$execute(statement)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"statement SQL statement","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for DuckDB Database Interface — evoland_db","text":". rows affected statement","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"method-row-count-","dir":"Reference","previous_headings":"","what":"Method row_count()","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"Get table row count","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"","code":"evoland_db$row_count(table_name)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"table_name Character string. Name database table view query.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for DuckDB Database Interface — evoland_db","text":". rows affected statement","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"method-delete-from-","dir":"Reference","previous_headings":"","what":"Method delete_from()","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"Empty table","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"","code":"evoland_db$delete_from(table_name, where = NULL)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"table_name Character string. Name database table view delete. Character string, defaults NULL: delete everything table.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for DuckDB Database Interface — evoland_db","text":". rows affected statement","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"method-copy-db-","dir":"Reference","previous_headings":"","what":"Method copy_db()","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"Copy full DB different one","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"","code":"evoland_db$copy_db(target_path, source_db)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"target_path Character string. Name database file copy source_db Character string. Name database copy . Defaults object's DB path","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"method-set-coords-","dir":"Reference","previous_headings":"","what":"Method set_coords()","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"Set coordinates DB; overwrites repeated call","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"","code":"evoland_db$set_coords(type = c(\"square\"), ...)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"type string; type coordinates set, see coords_t ... named arguments passed appropriate coordinate creator function","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"objects class cloneable method.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"","code":"evoland_db$clone(deep = FALSE)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/evoland_db.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for DuckDB Database Interface — evoland_db","text":"deep Whether make deep clone.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/intrv_masks_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Intervention Masks Table — intrv_masks_t","title":"Create Intervention Masks Table — intrv_masks_t","text":"Construct validate (part ) intrv_masks_t object. used positively link interventions []","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/intrv_masks_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Intervention Masks Table — intrv_masks_t","text":"","code":"as_intrv_masks_t(x)  # S3 method for class 'intrv_masks_t' print(x, nrow = 10, ...)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/intrv_masks_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Intervention Masks Table — intrv_masks_t","text":"x object accepted data.table::setDT() nrow see data.table::print.data.table ... passed data.table::print.data.table","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/intrv_masks_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Intervention Masks Table — intrv_masks_t","text":"data.table-inheriting object columns id_intrv id_coord, creating relation coordinates apply ","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/intrv_masks_t.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Create Intervention Masks Table — intrv_masks_t","text":"print(intrv_masks_t): Print intrv_masks_t object, passing params data.table print","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/intrv_meta_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Intervention Metadata Table / Entries — intrv_meta_t","title":"Create Intervention Metadata Table / Entries — intrv_meta_t","text":"Creates intrv_meta_t table rows therein based intervention specifications.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/intrv_meta_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Intervention Metadata Table / Entries — intrv_meta_t","text":"","code":"as_intrv_meta_t(x)  create_intrv_meta_t(intrv_spec)  create_intrv_meta_t_row(   name = character(),   pretty_name = character(),   description = NA_character_,   id_period_list = integer(),   id_trans_list = integer(),   pre_allocation = logical(),   sources = data.frame(url = character(), md5sum = character()),   params )  # S3 method for class 'intrv_meta_t' print(x, ...)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/intrv_meta_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Intervention Metadata Table / Entries — intrv_meta_t","text":"x object can passed data.table::setDT() intrv_spec list intervention specifications, schema: see examples name Name use code queries pretty_name Name plots/output description Long description / operationalisation id_period_list Array associated period IDs id_trans_list Array associated transition IDs pre_allocation Boolean indicating intervention pre-allocation sources Data frame sources columns url `md5sum params list parameters, depth 1; children can length 1 ... passed data.table::print.data.table()","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/intrv_meta_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Intervention Metadata Table / Entries — intrv_meta_t","text":"data.table class \"intrv_meta_t\" columns: id_intrv: Unique ID intervention id_period_list: Array associated period IDs id_trans_list: Array associated transition IDs pre_allocation: Boolean indicating intervention pre-allocation name: Name use code queries pretty_name: Name plots/output description: Long description / operationalisation sources: Array structs url md5sum params: Map parameters","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/intrv_meta_t.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Create Intervention Metadata Table / Entries — intrv_meta_t","text":"print(intrv_meta_t): Print intrv_meta_t object, passing params data.table print","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/intrv_meta_t.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create Intervention Metadata Table / Entries — intrv_meta_t","text":"create_intrv_meta_t(): Creates intrv_meta_t table intervention specifications create_intrv_meta_t_row(): Creates metadata entry / row","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/intrv_meta_t.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Intervention Metadata Table / Entries — intrv_meta_t","text":"","code":"create_intrv_meta_t(list(   protected_areas = list(     pre_allocation = TRUE,     pretty_name = \"Nature protection areas\",     description = \"introduces additional protected areas (PAs\",     periods = c(7, 8),     transitions = c(1, 2),     sources = list(       list(         url = \"file:///somedir/protected_areas.gpkg\",         md5sum = \"something\"       )     )   ),   hydro_predictors = list(     pre_allocation = TRUE,     pretty_name = \"Hydrological predictor variables\",     description = \"Provide dynamic predictor vars\",     params = list(       tmpdir = \"/mnt/ramdisk\"     )   ) )) #> Intervention Metadata Table #> Number of interventions: 2 #> Key: <id_intrv> #>    id_intrv id_period_list id_trans_list pre_allocation             name #>       <int>         <list>        <list>         <lgcl>           <char> #> 1:        1            7,8           1,2           TRUE  protected_areas #> 2:        2         [NULL]        [NULL]           TRUE hydro_predictors #> 4 variables not shown: [pretty_name <char>, description <char>, sources <list>, params <list>]"},{"path":"https://ethzplus.github.io/evoland-plus/reference/lulc_data_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Create LULC Data Table — lulc_data_t","title":"Create LULC Data Table — lulc_data_t","text":"Creates lulc_data_t table validates matches schema.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/lulc_data_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create LULC Data Table — lulc_data_t","text":"","code":"as_lulc_data_t(x)  # S3 method for class 'lulc_data_t' print(x, nrow = 10, ...)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/lulc_data_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create LULC Data Table — lulc_data_t","text":"x object can passed data.table::setDT() nrow see data.table::print.data.table ... passed data.table::print.data.table","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/lulc_data_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create LULC Data Table — lulc_data_t","text":"data.table class \"lulc_data_t\" columns: id_coord: Foreign key coords_t id_lulc: Foreign key lulc_meta_t id_period: Foreign key periods_t date: Exact date available (nullable)","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/lulc_data_t.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Create LULC Data Table — lulc_data_t","text":"print(lulc_data_t): Print lulc_data_t object, passing params data.table print","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/lulc_meta_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Create LULC Metadata Table — lulc_meta_t","title":"Create LULC Metadata Table — lulc_meta_t","text":"Create lulc_meta_t table rows thereof meet schema requirements. metadata describe characteristics land use classes.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/lulc_meta_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create LULC Metadata Table — lulc_meta_t","text":"","code":"as_lulc_meta_t(x)  create_lulc_meta_t(lulc_class_spec)  # S3 method for class 'lulc_meta_t' print(x, nrow = 10, ...)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/lulc_meta_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create LULC Metadata Table — lulc_meta_t","text":"lulc_class_spec list intervention specifications, see examples nrow see data.table::print.data.table ... passed data.table::print.data.table","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/lulc_meta_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create LULC Metadata Table — lulc_meta_t","text":"data.table class \"lulc_meta_t\" columns: id_lulc: Unique ID land use class name: Name use code queries pretty_name: Long name plots/output description: Long description / operationalisation","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/lulc_meta_t.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Create LULC Metadata Table — lulc_meta_t","text":"print(lulc_meta_t): Print lulc_meta_t object, passing params data.table print","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/lulc_meta_t.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create LULC Metadata Table — lulc_meta_t","text":"create_lulc_meta_t(): Creates lulc_meta_t table intervention specifications","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/lulc_meta_t.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create LULC Metadata Table — lulc_meta_t","text":"","code":"create_lulc_meta_t(list(   forest = list(     pretty_name = \"Dense Forest\",     description = \"Mature, dense forest cover\",     src_classes = c(1L, 2L)   ),   arable = list(     pretty_name = \"Arable land\",     description = \"Non-permanent cropland\",     src_classes = 3:6   ) )) #> LULC Metadata Table #> Number of classes: 2 #> Key: <id_lulc> #>    id_lulc   name  pretty_name                description src_classes #>      <int> <char>       <char>                     <char>      <list> #> 1:       1 forest Dense Forest Mature, dense forest cover         1,2 #> 2:       2 arable  Arable land     Non-permanent cropland     3,4,5,6"},{"path":"https://ethzplus.github.io/evoland-plus/reference/periods_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Period Table — periods_t","title":"Create Period Table — periods_t","text":"Creates period table, .e. description discrete periods land use can transition. necessary ) land use data may available regular time series need assigned form, b) normalization helps consistency.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/periods_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Period Table — periods_t","text":"","code":"as_periods_t(x)  create_periods_t(   period_length_str = \"P10Y\",   start_observed = \"1985-01-01\",   end_observed = \"2020-01-01\",   end_extrapolated = \"2060-01-01\" )  # S3 method for class 'periods_t' print(x, nrow = 10, ...)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/periods_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Period Table — periods_t","text":"x list data.frame coercible data.table period_length_str ISO 8601 duration string specifying length period (currently accepting years, e.g., \"P5Y\" 5 years) start_observed Start date observed data (YYYY-MM-DD) end_observed End date observed data (YYYY-MM-DD) end_extrapolated End date extrapolation time range (YYYY-MM-DD) nrow see data.table::print.data.table ... passed data.table::print.data.table","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/periods_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Period Table — periods_t","text":"data.table class \"periods_t\" columns: id_period: Unique ID tperiod start_date: Start date period end_date: End date period is_extrapolated: bool, observations matched period, used extrapolation?","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/periods_t.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Create Period Table — periods_t","text":"print(periods_t): Print periods_t object, passing params data.table print","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/periods_t.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create Period Table — periods_t","text":"create_periods_t(): Creates periods_t table specifications; periods start end_observed marked extrapolated","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/pred_data_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Predictor Data Table — pred_data_t","title":"Create Predictor Data Table — pred_data_t","text":"Construct validate pred_data_t objects, used store predictor data. Different data types (float, int, bool) different subclasses (pred_data_t_float, ...)","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/pred_data_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Predictor Data Table — pred_data_t","text":"","code":"as_pred_data_t(x, type)  # S3 method for class 'pred_data_t' print(x, nrow = 10, ...)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/pred_data_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Predictor Data Table — pred_data_t","text":"x Coercible data.table type Character string specifying data type: \"float\", \"int\", \"bool\" nrow see data.table::print.data.table ... passed data.table::print.data.table","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/pred_data_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Predictor Data Table — pred_data_t","text":"data.table class \"pred_data_t_\" \"pred_data_t\" columns: id_pred: Foreign key pred_meta_t id_coord: Foreign key coords_t id_period: Foreign key periods_t value: Predictor value (type depends subclass)","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/pred_data_t.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Create Predictor Data Table — pred_data_t","text":"print(pred_data_t): Print pred_data_t object, passing params data.table print","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/pred_meta_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Predictor Metadata Table — pred_meta_t","title":"Create Predictor Metadata Table — pred_meta_t","text":"Construct validate pred_meta_t objects, used store predictor metadata.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/pred_meta_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Predictor Metadata Table — pred_meta_t","text":"","code":"as_pred_meta_t(x)  create_pred_meta_t(pred_spec)  # S3 method for class 'pred_meta_t' print(x, ...)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/pred_meta_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Predictor Metadata Table — pred_meta_t","text":"x object accepted data.table::setDT() pred_spec list predictor specifications, schema: see examples ... passed data.table::print.data.table()","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/pred_meta_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Predictor Metadata Table — pred_meta_t","text":"data.table class \"pred_meta_t\" columns: id_pred: Unique ID predictor name: Name use code queries pretty_name: Name plots/output description: Long description / operationalisation orig_format: Original format description sources: Sources, data.frame cols url md5sum unit: SI-compatible unit (nullable categorical) factor_levels: Map factor levels (nullable)","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/pred_meta_t.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Create Predictor Metadata Table — pred_meta_t","text":"print(pred_meta_t): Print pred_meta_t object, passing params data.table print","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/pred_meta_t.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create Predictor Metadata Table — pred_meta_t","text":"create_pred_meta_t(): Creates pred_meta_t table intervention specifications","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/pred_meta_t.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Predictor Metadata Table — pred_meta_t","text":"","code":"create_pred_meta_t(list(    noise = list(      unit = \"dBa\",      pretty_name = \"Maximum noise exposure\",      orig_format = \"10m*10m raster\",      description = \"daytime & nighttime road & rail noise exposure\",      sources = list(        list(          url = \"https://data.geo.admin.ch/ch.bafu.laerm-strassenlaerm_tag/laerm-strassenlaerm_tag/laerm-strassenlaerm_tag_2056.tif\",          md5sum = \"a4b9f1c04ee63824f18852bfd1eecbdd\"        ),        list(          url = \"https://data.geo.admin.ch/ch.bafu.laerm-bahnlaerm_nacht/laerm-bahnlaerm_nacht/laerm-bahnlaerm_nacht_2056.tif\",          md5sum = \"4b782128495b5af8467e2259bd57def2\"        )      )    ),    distance_to_lake = list(      unit = \"m\",      pretty_name = \"Distance to closest lake\",      format = \"vector\",      description = \"Derived from swissTLM3D\",      sources = list(list(        url = \"https://data.geo.admin.ch/ch.swisstopo.swisstlm3d/swisstlm3d_2025-03/swisstlm3d_2025-03_2056_5728.gpkg.zip\",        md5sum = \"ecb3bcfbf6316c6e7542e20de24f61b7\"      ))    )  )) #> Predictor Metadata Table #> Number of predictors: 2 #> Key: <id_pred> #>    id_pred             name              pretty_name #>      <int>           <char>                   <char> #> 1:       1            noise   Maximum noise exposure #> 2:       2 distance_to_lake Distance to closest lake #> 5 variables not shown: [description <char>, orig_format <char>, sources <list>, unit <char>, factor_levels <list>]"},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_meta_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Transition Metadata Table — trans_meta_t","title":"Create Transition Metadata Table — trans_meta_t","text":"Creates trans_meta_t table based observed land use transitions LULC data. function analyzes transition patterns creates metadata entries viable transition type.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_meta_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Transition Metadata Table — trans_meta_t","text":"","code":"as_trans_meta_t(x)  # S3 method for class 'trans_meta_t' print(x, nrow = 10, ...)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_meta_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Transition Metadata Table — trans_meta_t","text":"nrow see data.table::print.data.table ... passed data.table::print.data.table db evoland_db instance populated lulc_data_t lulc_meta_t tables","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_meta_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Transition Metadata Table — trans_meta_t","text":"data.table class \"trans_meta_t\" columns: id_trans: Unique ID transition id_lulc_anterior: Foreign key lulc_meta_t (transition) id_lulc_posterior: Foreign key lulc_meta_t (transition) cardinality: many times transition occurred frequency_rel: Frequency relative transitions timestep frequency_abs: Frequency relative coordinate pairs data timestep is_viable: Whether transition viable modelling","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_meta_t.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Create Transition Metadata Table — trans_meta_t","text":"print(trans_meta_t): Print trans_meta_t object, passing params data.table print","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_models_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Transition Models Table — trans_models_t","title":"Create Transition Models Table — trans_models_t","text":"Creates trans_models_t table storing transition model metadata serialized model objects. function creates empty table proper structure storing fitted models.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_models_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Transition Models Table — trans_models_t","text":"","code":"as_trans_models_t(x)  # S3 method for class 'trans_models_t' print(x, nrow = 10, ...)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_models_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Transition Models Table — trans_models_t","text":"x list data.frame coercible data.table nrow see data.table::print.data.table ... passed data.table::print.data.table","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_models_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Transition Models Table — trans_models_t","text":"data.table class \"trans_models_t\" columns: id_trans: Foreign key trans_meta_t id_period: Foreign key periods_t model_family: Model family (e.g., \"rf\", \"glm\", \"bayesian\") model_params: Map model (hyper) parameters goodness_of_fit: Map various measures fit (e.g., ROC AUC) model_obj_part: BLOB serialized model object validation model_obj_full: BLOB serialized model object extrapolation","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_models_t.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Create Transition Models Table — trans_models_t","text":"print(trans_models_t): Print trans_models_t object, passing params data.table print","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_preds_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Transition-Predictor Relationship Table — trans_preds_t","title":"Create Transition-Predictor Relationship Table — trans_preds_t","text":"Creates trans_preds_t table based relationships transitions predictors. function establishes predictors useful modelling transition type.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_preds_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Transition-Predictor Relationship Table — trans_preds_t","text":"","code":"as_trans_preds_t(x)  # S3 method for class 'trans_preds_t' print(x, nrow = 10, ...)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_preds_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Transition-Predictor Relationship Table — trans_preds_t","text":"nrow see data.table::print.data.table ... passed data.table::print.data.table db evoland_db instance populated trans_meta_t pred_meta_t tables","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_preds_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Transition-Predictor Relationship Table — trans_preds_t","text":"data.table class \"trans_preds_t\" columns: id_pred: Foreign key pred_meta_t id_trans: Foreign key trans_meta_t","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/trans_preds_t.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Create Transition-Predictor Relationship Table — trans_preds_t","text":"print(trans_preds_t): Print trans_preds_t object, passing params data.table print","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/util.html","id":null,"dir":"Reference","previous_headings":"","what":"evoland utility functions — util","title":"evoland utility functions — util","text":"mostly used validate evoland S3 objects.","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/util.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"evoland utility functions — util","text":"","code":"validate(x, ...)  new_evoland_table(x, class_name, keycols)  check_missing_names(x, required_names)  x %||% y  pluck_wildcard(lst, ...)  ensure_dir(dir)"},{"path":"https://ethzplus.github.io/evoland-plus/reference/util.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"evoland utility functions — util","text":"x Left-hand side value ... Index arguments. Use NA match elements level class_name class name attach \"evoland_t\" keycols columns set key, see data.table::setkey() required_names Vector required names y Right-hand side value (fallback) lst list index ","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/util.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"evoland utility functions — util","text":"NULL, called side effect indexed result, may single element list elements","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/util.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"evoland utility functions — util","text":"validate(): Provides S3 validation generic new_evoland_table(): Add evoland_t class check_missing_names(): Check required names present x %||% y: Null coalescing operator pluck_wildcard(): Pluck wildcard support ensure_dir(): Ensure directory exists; return argument pipeability","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/util_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities to download and manage files — util_download","title":"Utilities to download and manage files — util_download","text":"order maintain clean set raw data files, functions help retrieving raw data online source caching .","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/util_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities to download and manage files — util_download","text":"","code":"download_and_verify(   df_in,   target_dir = getOption(\"evoland.cachedir\"),   overwrite = FALSE )"},{"path":"https://ethzplus.github.io/evoland-plus/reference/util_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities to download and manage files — util_download","text":"df_in Data frame 'url' 'md5sum' columns target_dir Target directory downloads, defaults option evoland.cachedir overwrite Whether overwrite existing files (default: FALSE)","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/util_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities to download and manage files — util_download","text":"df_out, df_in added column \"local_filename\", full path can constructed","code":""},{"path":"https://ethzplus.github.io/evoland-plus/reference/util_download.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Utilities to download and manage files — util_download","text":"download_and_verify(): Download set files check integrity md5 checksum","code":""}]
