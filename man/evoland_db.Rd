% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evoland_db.R
\name{evoland_db}
\alias{evoland_db}
\title{R6 Class for DuckDB Database Interface}
\description{
An R6 class that provides an interface to a DuckDB database for the evoland
package. This class handles database initialization, data commits, and data
fetching operations.
}
\examples{

## ------------------------------------------------
## Method `evoland_db$new`
## ------------------------------------------------

\dontrun{
# Create new database
db <- evoland_db$new("my_database.duckdb")

# Open existing database in read-only mode
db_readonly <- evoland_db$new("existing.duckdb", write = FALSE)
}
Commit data to the database


## ------------------------------------------------
## Method `evoland_db$commit`
## ------------------------------------------------

\dontrun{
# Commit data with different modes
db$commit(lulc_meta_data, mode = "overwrite")
db$commit(lulc_data, mode = "append")
db$commit(updated_coords, mode = "upsert")
}
Fetch data from the database


## ------------------------------------------------
## Method `evoland_db$fetch`
## ------------------------------------------------

\dontrun{
# Fetch all data from a table
coords <- db$fetch("coords_t")

# Fetch with WHERE clause
recent_data <- db$fetch("lulc_data_t", where = "date >= '2020-01-01'")
}
List all tables in the database

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{connection}}{DBI connection object to the DuckDB database}

\item{\code{path}}{Character string path to the database file}

\item{\code{write_mode}}{Logical indicating if database is opened in write mode
Initialize a new evoland_db object}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-evoland_db-new}{\code{evoland_db$new()}}
\item \href{#method-evoland_db-commit}{\code{evoland_db$commit()}}
\item \href{#method-evoland_db-fetch}{\code{evoland_db$fetch()}}
\item \href{#method-evoland_db-list_tables}{\code{evoland_db$list_tables()}}
\item \href{#method-evoland_db-table_exists}{\code{evoland_db$table_exists()}}
\item \href{#method-evoland_db-clone}{\code{evoland_db$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-new"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$new(path, write = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{Character string. Path to the DuckDB database file.}

\item{\code{write}}{Logical. Whether to open the database in write mode. Default is TRUE.
If FALSE, the database file must already exist.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{evoland_db} object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Create new database
db <- evoland_db$new("my_database.duckdb")

# Open existing database in read-only mode
db_readonly <- evoland_db$new("existing.duckdb", write = FALSE)
}
Commit data to the database

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-commit"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-commit}{}}}
\subsection{Method \code{commit()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$commit(x, mode = "append")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Data object to commit. The S3 class determines the target table.}

\item{\code{mode}}{Character string. One of "append" (default), "upsert", or "overwrite".}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL (called for side effects)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Commit data with different modes
db$commit(lulc_meta_data, mode = "overwrite")
db$commit(lulc_data, mode = "append")
db$commit(updated_coords, mode = "upsert")
}
Fetch data from the database

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-fetch"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-fetch}{}}}
\subsection{Method \code{fetch()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$fetch(x, where = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Character string. Name of the database table or view to query.}

\item{\code{where}}{Character string. Optional WHERE clause for the SQL query.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data.frame with the queried data, with appropriate S3 class attached.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Fetch all data from a table
coords <- db$fetch("coords_t")

# Fetch with WHERE clause
recent_data <- db$fetch("lulc_data_t", where = "date >= '2020-01-01'")
}
List all tables in the database

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-list_tables"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-list_tables}{}}}
\subsection{Method \code{list_tables()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$list_tables()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character vector of table names
Check if a table exists
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-table_exists"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-table_exists}{}}}
\subsection{Method \code{table_exists()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$table_exists(table_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{table_name}}{Character string. Name of the table to check.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical indicating if table exists
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-clone"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
