% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evoland_db.R
\name{evoland_db}
\alias{evoland_db}
\title{R6 Class for DuckDB Database Interface}
\description{
An R6 class that provides an interface to a DuckDB database for the evoland
package. This class handles database initialization, data commits, and data
fetching operations.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{connection}}{DBI connection object to the DuckDB database}

\item{\code{path}}{Character string path to the database file}

\item{\code{write_mode}}{Logical indicating if database is opened in write mode
Initialize a new evoland_db object}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{config}}{Retrieve \link{evoland_config}; may be assigned a config
(\code{\link[=read_evoland_config]{read_evoland_config()}}) only if no other config is present}

\item{\code{coords_t}}{A \code{coords_t} instance; see \code{\link[=create_coords_t]{create_coords_t()}} for the type of
object to assign. Assigning is an upsert operation.}

\item{\code{periods_t}}{A \code{periods_t} instance; see \code{\link[=create_periods_t]{create_periods_t()}} for the type of
object to assign. Assigning is an upsert operation.}

\item{\code{lulc_meta_t}}{A \code{lulc_meta_t} instance; see \code{\link[=create_lulc_meta_t]{create_lulc_meta_t()}} for the type of
object to assign. Assigning is an upsert operation.}

\item{\code{lulc_data_t}}{A \code{lulc_data_t} instance; see \code{\link[=create_lulc_data_t]{create_lulc_data_t()}} for the type of
object to assign. Assigning is an upsert operation.}

\item{\code{pred_meta_t}}{A \code{pred_meta_t} instance; see \code{\link[=create_pred_meta_t]{create_pred_meta_t()}} for the type of
object to assign. Assigning is an upsert operation.}

\item{\code{pred_sources_v}}{Retrieve a table of distinct predictor urls and their
md5sum}

\item{\code{pred_data_t_float}}{A \code{pred_data_t_float} instance; see
\code{\link[=create_pred_data_t]{create_pred_data_t()}} for the type of object to assign. Assigning is an
upsert operation.}

\item{\code{pred_data_t_int}}{A \code{pred_data_t_int} instance; see
\code{\link[=create_pred_data_t]{create_pred_data_t()}} for the type of object to assign. Assigning is an
upsert operation.}

\item{\code{pred_data_t_bool}}{A \code{pred_data_t_bool} instance; see
\code{\link[=create_pred_data_t]{create_pred_data_t()}} for the type of object to assign. Assigning is an
upsert operation.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-evoland_db-new}{\code{evoland_db$new()}}
\item \href{#method-evoland_db-commit}{\code{evoland_db$commit()}}
\item \href{#method-evoland_db-fetch}{\code{evoland_db$fetch()}}
\item \href{#method-evoland_db-list_tables}{\code{evoland_db$list_tables()}}
\item \href{#method-evoland_db-execute}{\code{evoland_db$execute()}}
\item \href{#method-evoland_db-row_count}{\code{evoland_db$row_count()}}
\item \href{#method-evoland_db-delete_from}{\code{evoland_db$delete_from()}}
\item \href{#method-evoland_db-clone}{\code{evoland_db$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-new"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$new(path, write = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{Character string. Path to the DuckDB database file. May also be ":memory:".}

\item{\code{write}}{Logical. Whether to open the database in write mode. Default is TRUE.
If FALSE, the database file must already exist.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{evoland_db} object
Commit data to the database
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-commit"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-commit}{}}}
\subsection{Method \code{commit()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$commit(x, table_name, mode = "upsert")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Data object to commit.}

\item{\code{table_name}}{Table to target}

\item{\code{mode}}{Character string. One of "upsert" (default), "append", or "overwrite".}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL (called for side effects)
Fetch data from the database
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-fetch"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-fetch}{}}}
\subsection{Method \code{fetch()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$fetch(table_name, where = NULL, limit = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{table_name}}{Character string. Name of the database table or view to query.}

\item{\code{where}}{Character string. Optional WHERE clause for the SQL query.}

\item{\code{limit}}{integerish, limit the amount of rows to return}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A table of the original class
List all tables in the database
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-list_tables"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-list_tables}{}}}
\subsection{Method \code{list_tables()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$list_tables()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character vector of table names
Execute statement
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-execute"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-execute}{}}}
\subsection{Method \code{execute()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$execute(statement)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{statement}}{A SQL statement}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
No. of rows affected by statement
Get table row count
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-row_count"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-row_count}{}}}
\subsection{Method \code{row_count()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$row_count(table_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{table_name}}{Character string. Name of the database table or view to query.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
No. of rows affected by statement
Empty a table
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-delete_from"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-delete_from}{}}}
\subsection{Method \code{delete_from()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$delete_from(table_name, where = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{table_name}}{Character string. Name of the database table or view to delete.}

\item{\code{where}}{Character string, defaults to NULL: delete everything in table.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
No. of rows affected by statement
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-clone"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
