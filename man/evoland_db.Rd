% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evoland_db.R
\name{evoland_db}
\alias{evoland_db}
\title{R6 Class for DuckDB Database Interface}
\description{
An R6 class that provides an interface to a DuckDB database for the evoland
package. This class handles database initialization, data commits, and data
fetching operations.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{connection}}{DBI connection object to the DuckDB database}

\item{\code{path}}{Character string path to the database file}

\item{\code{write_mode}}{Logical indicating if database is opened in write mode}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{coords_t}}{A \code{coords_t} instance; see \code{\link[=create_coords_t]{create_coords_t()}} for the type of
object to assign. Assigning is an upsert operation.}

\item{\code{extent}}{Return a terra SpatExtent based on coords_t}

\item{\code{coords_minimal}}{data.table with only (id_coord, lon, lat)}

\item{\code{periods_t}}{A \code{periods_t} instance; see \code{\link[=create_periods_t]{create_periods_t()}} for the type of
object to assign. Assigning is an upsert operation.}

\item{\code{lulc_meta_t}}{A \code{lulc_meta_t} instance; see \code{\link[=create_lulc_meta_t]{create_lulc_meta_t()}} for the type of
object to assign. Assigning is an upsert operation.}

\item{\code{lulc_meta_long_v}}{Return a \code{lulc_meta_long_v} instance, i.e. unrolled \code{lulc_meta_t}.}

\item{\code{lulc_data_t}}{A \code{lulc_data_t} instance; see \code{\link[=as_lulc_data_t]{as_lulc_data_t()}} for the type of
object to assign. Assigning is an upsert operation.}

\item{\code{pred_meta_t}}{A \code{pred_meta_t} instance; see \code{\link[=create_pred_meta_t]{create_pred_meta_t()}} for the type of
object to assign. Assigning is an upsert operation.}

\item{\code{pred_sources_v}}{Retrieve a table of distinct predictor urls and their
md5sum}

\item{\code{pred_data_t_float}}{A \code{pred_data_t_float} instance; see
\code{\link[=create_pred_data_t]{create_pred_data_t()}} for the type of object to assign. Assigning is an
upsert operation.}

\item{\code{pred_data_t_int}}{A \code{pred_data_t_int} instance; see
\code{\link[=create_pred_data_t]{create_pred_data_t()}} for the type of object to assign. Assigning is an
upsert operation.}

\item{\code{pred_data_t_bool}}{A \code{pred_data_t_bool} instance; see
\code{\link[=create_pred_data_t]{create_pred_data_t()}} for the type of object to assign. Assigning is an
upsert operation.}

\item{\code{trans_meta_t}}{A \code{trans_meta_t} instance; see \code{\link[=create_trans_meta_t]{create_trans_meta_t()}} for the type of
object to assign. Assigning is an upsert operation.}

\item{\code{trans_preds_t}}{A \code{trans_preds_t} instance; see \code{\link[=create_trans_preds_t]{create_trans_preds_t()}} for the type of
object to assign. Assigning is an upsert operation.}

\item{\code{intrv_meta_t}}{A \code{intrv_meta_t} instance; see \code{\link[=create_intrv_meta_t]{create_intrv_meta_t()}} for the type of
object to assign. Assigning is an upsert operation.}

\item{\code{intrv_masks_t}}{A \code{intrv_masks_t} instance; see \code{\link[=as_intrv_masks_t]{as_intrv_masks_t()}} for the type of
object to assign. Assigning is an upsert operation.}

\item{\code{trans_models_t}}{A \code{trans_models_t} instance; see \code{\link[=create_trans_models_t]{create_trans_models_t()}} for the type
of object to assign. Assigning is an upsert operation.}

\item{\code{alloc_params_t}}{A \code{alloc_params_t} instance; see \code{\link[=as_alloc_params_t]{as_alloc_params_t()}} for the type
of object to assign. Assigning is an upsert operation.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-evoland_db-new}{\code{evoland_db$new()}}
\item \href{#method-evoland_db-commit}{\code{evoland_db$commit()}}
\item \href{#method-evoland_db-fetch}{\code{evoland_db$fetch()}}
\item \href{#method-evoland_db-list_tables}{\code{evoland_db$list_tables()}}
\item \href{#method-evoland_db-execute}{\code{evoland_db$execute()}}
\item \href{#method-evoland_db-row_count}{\code{evoland_db$row_count()}}
\item \href{#method-evoland_db-delete_from}{\code{evoland_db$delete_from()}}
\item \href{#method-evoland_db-copy_db}{\code{evoland_db$copy_db()}}
\item \href{#method-evoland_db-set_coords}{\code{evoland_db$set_coords()}}
\item \href{#method-evoland_db-set_periods}{\code{evoland_db$set_periods()}}
\item \href{#method-evoland_db-add_predictor}{\code{evoland_db$add_predictor()}}
\item \href{#method-evoland_db-clone}{\code{evoland_db$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-new"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new evoland_db object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$new(
  path,
  write = TRUE,
  report_name = "evoland_scenario",
  report_name_pretty = "Default Evoland Scenario",
  report_include_date = FALSE,
  report_username = Sys.getenv("USER", unset = "unknown")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{Character string. Path to the DuckDB database file. May also be ":memory:".}

\item{\code{write}}{Logical. Whether to open the database in write mode. Default is TRUE.
If FALSE, the database file must already exist.}

\item{\code{report_name}}{Character string. Name of the report scenario.}

\item{\code{report_name_pretty}}{Character string. Pretty name of the report scenario.}

\item{\code{report_include_date}}{Logical. Whether to include the date in the report scenario.}

\item{\code{report_username}}{Character string. Username for the report scenario,
defaults to $USER env var}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{evoland_db} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-commit"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-commit}{}}}
\subsection{Method \code{commit()}}{
Commit data to the database
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$commit(x, table_name, mode = "upsert")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Data object to commit.}

\item{\code{table_name}}{Table to target}

\item{\code{mode}}{Character string. One of "upsert" (default), "append", or "overwrite".}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL (called for side effects)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-fetch"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-fetch}{}}}
\subsection{Method \code{fetch()}}{
Fetch data from the database
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$fetch(table_name, where = NULL, limit = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{table_name}}{Character string. Name of the database table or view to query.}

\item{\code{where}}{Character string. Optional WHERE clause for the SQL query.}

\item{\code{limit}}{integerish, limit the amount of rows to return}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A table of the original class
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-list_tables"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-list_tables}{}}}
\subsection{Method \code{list_tables()}}{
List all tables in the database
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$list_tables()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character vector of table names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-execute"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-execute}{}}}
\subsection{Method \code{execute()}}{
Execute statement
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$execute(statement)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{statement}}{A SQL statement}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
No. of rows affected by statement
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-row_count"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-row_count}{}}}
\subsection{Method \code{row_count()}}{
Get table row count
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$row_count(table_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{table_name}}{Character string. Name of the database table or view to query.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
No. of rows affected by statement
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-delete_from"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-delete_from}{}}}
\subsection{Method \code{delete_from()}}{
Empty a table
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$delete_from(table_name, where = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{table_name}}{Character string. Name of the database table or view to delete.}

\item{\code{where}}{Character string, defaults to NULL: delete everything in table.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
No. of rows affected by statement
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-copy_db"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-copy_db}{}}}
\subsection{Method \code{copy_db()}}{
Copy full DB to a different one.
Note, this may fail due to \url{https://github.com/duckdb/duckdb/issues/16785}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$copy_db(target_path, source_db)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{target_path}}{Character string. Name of the database file to copy to}

\item{\code{source_db}}{Character string. Name of the database to copy from. Defaults to
this object's DB path}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-set_coords"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-set_coords}{}}}
\subsection{Method \code{set_coords()}}{
Set coordinates for DB. Cannot overwrite existing table (would mean cascading deletion)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$set_coords(type = c("square"), ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{string; which type of coordinates to set, see \link{coords_t}}

\item{\code{...}}{named arguments are passed to the appropriate coordinate creator function}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-set_periods"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-set_periods}{}}}
\subsection{Method \code{set_periods()}}{
Set periods for DB. See \code{\link{periods_t}}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$set_periods(
  period_length_str = "P10Y",
  start_observed = "1985-01-01",
  end_observed = "2020-01-01",
  end_extrapolated = "2060-01-01"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{period_length_str}}{ISO 8601 duration string specifying the length of each period (currently
only accepting years, e.g., "P5Y" for 5 years)}

\item{\code{start_observed}}{Start date of the observed data (YYYY-MM-DD)}

\item{\code{end_observed}}{End date of the observed data (YYYY-MM-DD)}

\item{\code{end_extrapolated}}{End date for extrapolation time range (YYYY-MM-DD)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-add_predictor"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-add_predictor}{}}}
\subsection{Method \code{add_predictor()}}{
Add a predictor to the database
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$add_predictor(pred_spec, pred_data, pred_type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pred_spec}}{List of predictor specification; see \code{\link[=create_pred_meta_t]{create_pred_meta_t()}}}

\item{\code{pred_data}}{An object that can be coerced to \code{\link{pred_data_t}}, but doesn't have an
\code{id_pred}}

\item{\code{pred_type}}{Passed to \code{\link[=as_pred_data_t]{as_pred_data_t()}}; one of float, int, bool}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evoland_db-clone"></a>}}
\if{latex}{\out{\hypertarget{method-evoland_db-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{evoland_db$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
